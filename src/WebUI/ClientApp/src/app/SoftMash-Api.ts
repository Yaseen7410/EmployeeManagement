/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAccountClient {
    registerRequest(command: RegisterCommand): Observable<Result>;
    loginRequest(command: LoginCommand): Observable<Result>;
    updateUserVerificationStatus(command: UpdatestatusCommand): Observable<Result>;
}

@Injectable({
    providedIn: 'root'
})
export class AccountClient implements IAccountClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    registerRequest(command: RegisterCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/Account/registerRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterRequest(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processRegisterRequest(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    loginRequest(command: LoginCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/Account/loginRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLoginRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLoginRequest(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processLoginRequest(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    updateUserVerificationStatus(command: UpdatestatusCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/Account/updateUserVerificationStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUserVerificationStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUserVerificationStatus(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateUserVerificationStatus(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }
}

export interface IEmployeeClient {
    employeesQuery(request: GetEmployees): Observable<GridResultOfEmpDTO>;
    addEmployees(request: AddEmployeeCommand): Observable<Result>;
    deleteEmployees(request: DeleteEmployeeCommand): Observable<Result>;
    updateEmployees(request: UpdateEmployeeCommand): Observable<Result>;
}

@Injectable({
    providedIn: 'root'
})
export class EmployeeClient implements IEmployeeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    employeesQuery(request: GetEmployees): Observable<GridResultOfEmpDTO> {
        let url_ = this.baseUrl + "/api/Employee/employeesQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEmployeesQuery(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEmployeesQuery(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfEmpDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfEmpDTO>><any>_observableThrow(response_);
        }));
    }

    protected processEmployeesQuery(response: HttpResponseBase): Observable<GridResultOfEmpDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfEmpDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfEmpDTO>(<any>null);
    }

    addEmployees(request: AddEmployeeCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/Employee/addEmployees";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEmployees(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEmployees(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processAddEmployees(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    deleteEmployees(request: DeleteEmployeeCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/Employee/deleteEmployees";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEmployees(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEmployees(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteEmployees(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    updateEmployees(request: UpdateEmployeeCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/Employee/updateEmployees";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateEmployees(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateEmployees(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateEmployees(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }
}

export interface IRegisterClient {
    registerQuery(request: GetRegisterQuery): Observable<GridResultOfRegisterDTO>;
    registerQuerybyId(request: GetByIdRegister): Observable<RegisterDTO>;
}

@Injectable({
    providedIn: 'root'
})
export class RegisterClient implements IRegisterClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    registerQuery(request: GetRegisterQuery): Observable<GridResultOfRegisterDTO> {
        let url_ = this.baseUrl + "/api/Register/registerQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterQuery(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterQuery(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfRegisterDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfRegisterDTO>><any>_observableThrow(response_);
        }));
    }

    protected processRegisterQuery(response: HttpResponseBase): Observable<GridResultOfRegisterDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfRegisterDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfRegisterDTO>(<any>null);
    }

    registerQuerybyId(request: GetByIdRegister): Observable<RegisterDTO> {
        let url_ = this.baseUrl + "/api/Register/registerQuerybyId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterQuerybyId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterQuerybyId(<any>response_);
                } catch (e) {
                    return <Observable<RegisterDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<RegisterDTO>><any>_observableThrow(response_);
        }));
    }

    protected processRegisterQuerybyId(response: HttpResponseBase): Observable<RegisterDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RegisterDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RegisterDTO>(<any>null);
    }
}

export interface IRolesClient {
    rolesQuery(request: GetRoles): Observable<GridResultOfRolesDTO>;
}

@Injectable({
    providedIn: 'root'
})
export class RolesClient implements IRolesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    rolesQuery(request: GetRoles): Observable<GridResultOfRolesDTO> {
        let url_ = this.baseUrl + "/api/Roles/RolesQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRolesQuery(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRolesQuery(<any>response_);
                } catch (e) {
                    return <Observable<GridResultOfRolesDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<GridResultOfRolesDTO>><any>_observableThrow(response_);
        }));
    }

    protected processRolesQuery(response: HttpResponseBase): Observable<GridResultOfRolesDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GridResultOfRolesDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GridResultOfRolesDTO>(<any>null);
    }
}

export class Result implements IResult {
    succeeded?: boolean;
    errors?: string[] | undefined;
    lists?: any | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.succeeded = _data["succeeded"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(item);
            }
            this.lists = _data["lists"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        data["lists"] = this.lists;
        return data; 
    }
}

export interface IResult {
    succeeded?: boolean;
    errors?: string[] | undefined;
    lists?: any | undefined;
}

export class RegisterDTO implements IRegisterDTO {
    id?: number;
    name!: string;
    email!: string;
    password!: string;
    confirmPassword!: string;
    address!: string;
    phoneNo!: string;
    isVerified?: boolean;
    rolesId?: number;

    constructor(data?: IRegisterDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
            this.address = _data["address"];
            this.phoneNo = _data["phoneNo"];
            this.isVerified = _data["isVerified"];
            this.rolesId = _data["rolesId"];
        }
    }

    static fromJS(data: any): RegisterDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        data["address"] = this.address;
        data["phoneNo"] = this.phoneNo;
        data["isVerified"] = this.isVerified;
        data["rolesId"] = this.rolesId;
        return data; 
    }
}

export interface IRegisterDTO {
    id?: number;
    name: string;
    email: string;
    password: string;
    confirmPassword: string;
    address: string;
    phoneNo: string;
    isVerified?: boolean;
    rolesId?: number;
}

export class RegisterCommand extends RegisterDTO implements IRegisterCommand {

    constructor(data?: IRegisterCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): RegisterCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IRegisterCommand extends IRegisterDTO {
}

export class LoginDTO implements ILoginDTO {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILoginDTO {
    email?: string | undefined;
    password?: string | undefined;
}

export class LoginCommand extends LoginDTO implements ILoginCommand {

    constructor(data?: ILoginCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): LoginCommand {
        data = typeof data === 'object' ? data : {};
        let result = new LoginCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ILoginCommand extends ILoginDTO {
}

export class UpdatestatusCommand extends RegisterDTO implements IUpdatestatusCommand {

    constructor(data?: IUpdatestatusCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): UpdatestatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatestatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdatestatusCommand extends IRegisterDTO {
}

export class GridResultOfEmpDTO implements IGridResultOfEmpDTO {
    data?: EmpDTO[] | undefined;
    total?: number;
    page?: number;

    constructor(data?: IGridResultOfEmpDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(EmpDTO.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): GridResultOfEmpDTO {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfEmpDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        return data; 
    }
}

export interface IGridResultOfEmpDTO {
    data?: EmpDTO[] | undefined;
    total?: number;
    page?: number;
}

export class EmpDTO implements IEmpDTO {
    id?: number;
    name?: string | undefined;
    address?: string | undefined;
    phone?: string | undefined;
    departmentId?: number;
    department?: Department | undefined;
    token?: string | undefined;

    constructor(data?: IEmpDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.address = _data["address"];
            this.phone = _data["phone"];
            this.departmentId = _data["departmentId"];
            this.department = _data["department"] ? Department.fromJS(_data["department"]) : <any>undefined;
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): EmpDTO {
        data = typeof data === 'object' ? data : {};
        let result = new EmpDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["address"] = this.address;
        data["phone"] = this.phone;
        data["departmentId"] = this.departmentId;
        data["department"] = this.department ? this.department.toJSON() : <any>undefined;
        data["token"] = this.token;
        return data; 
    }
}

export interface IEmpDTO {
    id?: number;
    name?: string | undefined;
    address?: string | undefined;
    phone?: string | undefined;
    departmentId?: number;
    department?: Department | undefined;
    token?: string | undefined;
}

export class Department implements IDepartment {
    id?: number;
    name?: string | undefined;

    constructor(data?: IDepartment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Department {
        data = typeof data === 'object' ? data : {};
        let result = new Department();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IDepartment {
    id?: number;
    name?: string | undefined;
}

export class GridQuery implements IGridQuery {
    filter?: { [key: string]: string; } | undefined;
    sort?: string | undefined;
    ascending?: boolean;
    page?: number;
    pageSize?: number;
    id?: number;

    constructor(data?: IGridQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["filter"]) {
                this.filter = {} as any;
                for (let key in _data["filter"]) {
                    if (_data["filter"].hasOwnProperty(key))
                        this.filter![key] = _data["filter"][key];
                }
            }
            this.sort = _data["sort"];
            this.ascending = _data["ascending"];
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): GridQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GridQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.filter) {
            data["filter"] = {};
            for (let key in this.filter) {
                if (this.filter.hasOwnProperty(key))
                    data["filter"][key] = this.filter[key];
            }
        }
        data["sort"] = this.sort;
        data["ascending"] = this.ascending;
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        data["id"] = this.id;
        return data; 
    }
}

export interface IGridQuery {
    filter?: { [key: string]: string; } | undefined;
    sort?: string | undefined;
    ascending?: boolean;
    page?: number;
    pageSize?: number;
    id?: number;
}

export class GetEmployees extends GridQuery implements IGetEmployees {

    constructor(data?: IGetEmployees) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GetEmployees {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployees();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetEmployees extends IGridQuery {
}

export class AddEmployeeCommand extends EmpDTO implements IAddEmployeeCommand {

    constructor(data?: IAddEmployeeCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): AddEmployeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddEmployeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddEmployeeCommand extends IEmpDTO {
}

export class DeleteEmployeeCommand implements IDeleteEmployeeCommand {
    empId?: number;

    constructor(data?: IDeleteEmployeeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.empId = _data["empId"];
        }
    }

    static fromJS(data: any): DeleteEmployeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteEmployeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["empId"] = this.empId;
        return data; 
    }
}

export interface IDeleteEmployeeCommand {
    empId?: number;
}

export class UpdateEmployeeCommand extends EmpDTO implements IUpdateEmployeeCommand {

    constructor(data?: IUpdateEmployeeCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): UpdateEmployeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateEmployeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdateEmployeeCommand extends IEmpDTO {
}

export class GridResultOfRegisterDTO implements IGridResultOfRegisterDTO {
    data?: RegisterDTO[] | undefined;
    total?: number;
    page?: number;

    constructor(data?: IGridResultOfRegisterDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RegisterDTO.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): GridResultOfRegisterDTO {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfRegisterDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        return data; 
    }
}

export interface IGridResultOfRegisterDTO {
    data?: RegisterDTO[] | undefined;
    total?: number;
    page?: number;
}

export class GetRegisterQuery extends GridQuery implements IGetRegisterQuery {

    constructor(data?: IGetRegisterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GetRegisterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRegisterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetRegisterQuery extends IGridQuery {
}

export class GetByIdRegister implements IGetByIdRegister {
    regId?: number;

    constructor(data?: IGetByIdRegister) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regId = _data["regId"];
        }
    }

    static fromJS(data: any): GetByIdRegister {
        data = typeof data === 'object' ? data : {};
        let result = new GetByIdRegister();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regId"] = this.regId;
        return data; 
    }
}

export interface IGetByIdRegister {
    regId?: number;
}

export class GridResultOfRolesDTO implements IGridResultOfRolesDTO {
    data?: RolesDTO[] | undefined;
    total?: number;
    page?: number;

    constructor(data?: IGridResultOfRolesDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RolesDTO.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): GridResultOfRolesDTO {
        data = typeof data === 'object' ? data : {};
        let result = new GridResultOfRolesDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        return data; 
    }
}

export interface IGridResultOfRolesDTO {
    data?: RolesDTO[] | undefined;
    total?: number;
    page?: number;
}

export class RolesDTO implements IRolesDTO {
    id?: number;
    name?: string | undefined;

    constructor(data?: IRolesDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): RolesDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RolesDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IRolesDTO {
    id?: number;
    name?: string | undefined;
}

export class GetRoles extends GridQuery implements IGetRoles {

    constructor(data?: IGetRoles) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GetRoles {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetRoles extends IGridQuery {
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}